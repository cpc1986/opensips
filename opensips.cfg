####### Global Parameters #########
log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4
open_files_limit=4096
tcp_connection_lifetime=360

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no

/* Server&UA */
server_header="Server: Webitel"
user_agent_header="User-Agent: Webitel"

####### Connectivity ########
listen=udp:eth0:5060
listen=tcp:eth0:5060
listen=ws:eth0:5080

####### Modules Section ########

#set module path
mpath="/opensips/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### HTTPD/Event modules
loadmodule "httpd.so"
modparam("httpd", "ip", "PRIVATE_IPV4")
modparam("httpd", "port", 8000)
loadmodule "mi_http.so"
loadmodule "event_jsonrpc.so"
#loadmodule "event_route.so"
#loadmodule "event_rabbitmq.so"
#modparam("event_rabbitmq", "heartbeat", 3)

#### PostgreSQL module
loadmodule "db_postgres.so"

#### FreeSWITCH module
#loadmodule "freeswitch.so"

#### AVPOPS module
loadmodule "avpops.so"
modparam("avpops", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "attr_avp", "$avp(attr)")
modparam("registrar", "received_avp", "$avp(received)") /* ?? */
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### Auth module
#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "uri_uriuser_column", "user_id")
modparam("auth_db", "domain_column", "realm")
modparam("auth_db", "uri_domain_column", "realm")
modparam("auth_db", "uri_user_column", "auth_id")
modparam("auth_db", "user_column", "auth_id")
modparam("auth_db", "password_column", "digest_ha1")
modparam("auth_db", "calculate_ha1", 0)
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "skip_version_check", 1)
modparam("auth_db", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")

#### UAC modules
loadmodule "uac_auth.so"
loadmodule "uac_registrant.so"
modparam("uac_registrant", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")
modparam("uac_registrant", "table_name", "wbt_registrant")
modparam("uac_registrant", "hash_size", 4)
modparam("uac_registrant", "timer_interval", 32)

#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")
modparam("domain", "db_mode", 0) /* 1 for cache */
modparam("domain", "domain_table", "wbt_domain")
modparam("domain", "domain_col", "dn")
modparam("domain", "attrs_col", "attrs")
modparam("auth_db|usrloc|uri", "use_domain", 1)

#### Permissions module
loadmodule "permissions.so"
modparam("permissions", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")
modparam("permissions", "address_table", "directory.sip_address_allow")

#### PRESENCE modules
loadmodule "xcap.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
modparam("xcap|presence", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")
modparam("presence_xml", "force_active", 1)
#modparam("presence", "mix_dialog_presence", 1)
modparam("presence", "fallback2db", 0)

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 1)
modparam("dialog", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")

#### SIP Session Timer module
loadmodule "sst.so"
modparam("sst", "sst_flag", "SST_FLAG")
modparam("sst", "min_se", 120)

#### DISPATCHER module
loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_probing_mode", 0)
modparam("dispatcher", "ds_ping_interval", 30)

####  NAT modules
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 10)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@webitel.com")
modparam("registrar|nathelper", "received_avp", "$avp(received)")

#### RTPengine protocol
loadmodule "rtpengine.so"
modparam("rtpengine", "db_url", "postgres://opensips:webitel@postgres:5432/webitel")

loadmodule "topology_hiding.so"

#### Protocols
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
#loadmodule "proto_tls.so"
loadmodule "proto_ws.so"
#loadmodule "proto_wss.so"
#modparam("proto_wss", "wss_max_msg_chunks", 16)
#loadmodule "tls_mgm.so"
##modparam("tls_mgm","tls_method", "TLSv1")
#modparam("tls_mgm", "server_domain", "dev")
#modparam("tls_mgm","verify_cert", "[dev]0")
#modparam("tls_mgm","require_cert", "[dev]0")
#modparam("tls_mgm", "match_ip_address", "[dev]*")
#modparam("tls_mgm", "match_sip_domain", "[dev]*")
#modparam("tls_mgm","certificate", "[dev]/opensips/etc/ssl/cert1.pem")
#modparam("tls_mgm","private_key", "[dev]/opensips/etc/ssl/privkey1.pem")
##modparam("tls_mgm","ca_list", "/usr/local/etc/opensips/tls/user/user-calist.pem")

####### Routing Logic ########

# main request routing logic

route{
	# initial NAT handling; detect if the request comes from behind a NAT
	# and apply contact fixing
	force_rport();
	if (nat_uac_test(23)) {
		if (is_method("REGISTER")) {
			fix_nated_register();
			setbflag(NAT);
		} else {
			fix_nated_contact();
			setflag(NAT);
		}
	}

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			# do_accounting("db","failed");
            rtpengine_delete();
		}

        if (topology_hiding_match()) {

            xlog("Succesfully matched this request to a topology hiding dialog. \n");
            xlog("Calller side callid is $ci \n");
            xlog("Callee side callid  is $TH_callee_callid \n");

		    if (check_route_param("nat=yes"))
			   setflag(NAT);

		    route(relay);
            exit;

        } else {

            # handle hop-by-hop ACK (no routing required)
            if ( is_method("ACK") ) {
                if ( t_check_trans() )
                    t_relay();
                exit;
            }

            # sequential request within a dialog should
            # take the path determined by record-routing
            if ( !loose_route() ) {
                if (is_method("SUBSCRIBE") && is_myself("$rd")) {
                    # in-dialog subscribe requests
                    route(handle_presence);
                    exit;
                }
                # we do record-routing for all our traffic, so we should not
                # receive any sequential requests without Route hdr.
                send_reply(404,"Not here");
                exit;
            }
        }

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

	}

    # CANCEL processing
    if (is_method("CANCEL")) {
        rtpengine_delete();
        if (t_check_trans())
            t_relay();
        exit;
    }

    # OPTIONS processing
    if( is_method("OPTIONS"))
           route(handle_options);

    # absorb retransmissions, but do not create transaction
    t_check_trans();

    if ( !(is_method("REGISTER")) ) {

        if ( ds_is_in_list("$si", $sp, 1) ) {
            # From mediaserver
            setflag(fs);

        } else if (is_from_local()) {
            # authenticate if from local subscriber
            # authenticate all initial non-REGISTER request that pretend to be
            # generated by local subscriber (domain from FROM URI is local)
            if (!proxy_authorize("", "wbt_subscriber")) {
                proxy_challenge("", 0);
                exit;
            }
            if (!db_is_from_authorized("wbt_subscriber")) {
                send_reply(403,"Forbidden auth ID");
                exit;
            }

            consume_credentials();
            # caller authenticated
            xlog("L_INFO", "Caller is authenticated\n");
            avp_db_query("SELECT uid, dc FROM wbt_subscriber WHERE user_id='$fU'", "$avp(uid);$avp(dc)");
            setflag(dev);
            append_hf("X-Webitel-User-Id: $avp(uid)\r\n");
            append_hf("X-Webitel-Domain-Id: $avp(dc)\r\n");
            append_hf("X-Webitel-Direction: outbound\r\n");

        } else {

        avp_db_query("select sa.id, sa.dc from directory.sip_registrant as sa where sa.binding_uri = '$ru' and sa.state = 3 order by sa.id limit 1;", "$avp(id);$avp(dc)");
        if ( $avp(id) > 0 ) {
                # From PSTN
                xlog("From registrant '$ru'\n");
                setflag(pstn);
                append_hf("X-Webitel-Gateway-Id: $avp(id)\r\n");
                append_hf("X-Webitel-Domain-Id: $avp(dc)\r\n");
                append_hf("X-Webitel-Direction: inbound\r\n");

          }  else if ( check_address(1,"$si",$sp,"$pr") ) {

            avp_db_query("select sa.id, sa.dc from directory.sip_address_allow as sa where sa.host = ('$td'||':'||'$Rp') and ('$si')::inet <<= sa.cidr and coalesce(nullif(port, 0), $sp) = $sp and coalesce(nullif(proto, 'any'), '$pr') = '$pr' order by sa.id limit 1;", "$avp(id);$avp(dc)");
            if ( $avp(id) > 0 ) {
                # From PSTN
                xlog("From SIP trunk to '$td'\n");
                setflag(pstn);
                append_hf("X-Webitel-Gateway-Id: $avp(id)\r\n");
                append_hf("X-Webitel-Domain-Id: $avp(dc)\r\n");
                append_hf("X-Webitel-Direction: inbound\r\n");

            } else {
                send_reply(403,"Forbidden auth host");
                exit;
            }

          } else {
            send_reply(403,"Relay Forbidden");
            exit;
          }

        }
    }

    # preloaded route checking
    if (loose_route()) {
        xlog("L_ERR",
            "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
        if (!is_method("ACK"))
            send_reply(403,"Preload Route denied");
        exit;
    }

    # record routing
    if (!is_method("REGISTER|MESSAGE"))
        record_route();

    # raise MESSAGE event
    #if (is_method("MESSAGE")) {
    #   $avp(attrs) = "user";
    #   $avp(vals) = $rU;
    #   $avp(attrs) = "msg";
    #   $avp(vals) = $rb;
    #   if (!raise_event("E_SIP_MESSAGE", $avp(attrs), $avp(vals)))
    #        xlog("L_ERR", "cannot raise E_SIP_MESSAGE event\n");
    #}

    if (is_method("INVITE")) {
        setflag(SST_FLAG); # Set the sst flag
        # create dialog with timeout
        if ( !create_dialog("B") ) {
            send_reply(500,"Internal Server Error");
            exit;
        }
    }

    if( is_method("PUBLISH|SUBSCRIBE"))
            route(handle_presence);

    if ($pr == "ws" || $pr == "wss")
        setflag(SRC_WS);

	# consider the client is behind NAT - always fix the contact
    if ($pr == "ws" || $pr == "wss")
	    fix_nated_contact();

    if (is_method("REGISTER")) {
        # authenticate the REGISTER requests
        if (!www_authorize("", "wbt_subscriber")) {
            www_challenge("", 0);
            exit;
        }

        if (!db_is_to_authorized("wbt_subscriber")) {
            xlog("Webitel user $tu is not authorized to authenticate with $au credential\n");
            send_reply(403,"Forbidden auth ID");
            exit;
        }
        if ($pr == "ws" || $pr == "wss") {
            setbflag(DST_WS);
            fix_nated_register();
        }
        if ($pr == "tcp" || $pr == "tls")
            setflag(TCP_PERSISTENT);
        if (isflagset(NAT))
            setbflag(SIP_PING_FLAG);
        $avp(attr) = $au;
        if (!save("location"))
            sl_reply_error();

        exit;
    }

    if ($rU==NULL) {
        # request with no Username in RURI
        send_reply(484,"Address Incomplete");
        exit;
    }

    if ( isflagset(pstn) ) {
        if ( !ds_select_dst(1,4) ) {
            send_reply(500,"No Destination available");
            exit;
        }
        t_on_failure("gw_failover");

    } else if( $(hdr(X-Webitel-Direction)[0])=="outbound" ) {
        xlog("Webitel outbound\n");

    } else if( $(hdr(X-Webitel-Direction)[0])=="internal" ) {
    # do lookup with method filtering
    xlog("Webitel internal\n");
        if (!lookup("location","m")) {
        if (!db_does_uri_exist("$ru","wbt_subscriber"))
                send_reply(480,"Subscriber absent");
                exit;
            }
            # redirect to a different VM system
            ## $du = "sip:127.0.0.2:5060"; # CUSTOMIZE ME

    } else {
        if ( !ds_select_dst(1,4) ) {
            send_reply(500,"No Destination available");
            exit;
        }
        t_on_failure("gw_failover");

    }

    if (isbflagset(NAT)) setflag(NAT);

    route(relay);
}

route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
        topology_hiding("UC");

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (isflagset(NAT)) {
		add_rr_param(";nat=yes");
	}

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}

route[rtpengine_offer] {
    if (isflagset(SRC_WS) && isbflagset(DST_WS))
        # - Web to web
        $var(reflags) = "replace-origin replace-session-connection SDES-off ICE=force";
    else if (isflagset(SRC_WS))
        # - Web to SIP
        $var(reflags) = "replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
    else if (isbflagset(DST_WS))
        # - SIP to web
        $var(reflags) = "replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-opus transcode-PCMU transcode-G722 SDES-off UDP/TLS/RTP/SAVP";
    else
        # - SIP to SIP
        $var(reflags) = "replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";

    rtpengine_use_set(1);
    rtpengine_offer("$var(reflags)");
}

route[rtpengine_answer] {
    if (isflagset(SRC_WS) && isbflagset(DST_WS))
        $var(reflags) = "replace-origin replace-session-connection SDES-off ICE=force";
    else if (isflagset(SRC_WS))
        $var(reflags) = "replace-origin replace-session-connection rtcp-mux-require ICE=force RTP/SAVPF";
    else
        $var(reflags) = "replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";

    rtpengine_use_set(1);
    rtpengine_answer("$var(reflags)");
}

# Presence route
route[handle_presence]
{
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
	} else
	if( is_method("SUBSCRIBE")) {
		handle_subscribe();
	}

	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");

    if (has_body("application/sdp")) route(rtpengine_offer);
}

onreply_route[handle_nat] {
	xlog("incoming reply\n");

    if ($pr == "ws" || $pr == "wss")
        fix_nated_contact();
	if (nat_uac_test(1))
    	fix_nated_contact();

    if (t_check_status("(183)|(200)") && has_body("application/sdp"))
        route(rtpengine_answer);
}

route[handle_options]
{
    send_reply(200, "I See You");
	exit;
}

failure_route[gw_failover] {
	if (t_was_cancelled()) {
        rtpengine_delete();
		exit;
	}

	# failure detection with redirect to next available trunk
	if (t_check_status("(408)|([56][0-9][0-9])")) {
        xlog("Webitel failed trunk $rd/$du detected \n");

        t_on_failure("gw_failover");
        t_relay();
        exit;
	}

    rtpengine_delete();
	send_reply(500,"All GW are down");
}

failure_route[missed_call] {
	if (t_was_cancelled()) {
        rtpengine_delete();
		exit;
	}

	# uncomment the following lines if you want to block client
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}


}

local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
        rtpengine_delete();
		#acc_db_request("200 Dialog Timeout", "acc");

	}
}
